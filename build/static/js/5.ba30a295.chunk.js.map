{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/CharSearcForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","language","textObjects","pageCount","price","prices","Skeleton","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setcharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setChatEnded","loading","error","onRequest","initial","onCharListLoaded","newCharList","ended","length","chatEnded","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","ref","el","tabIndex","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","to","resourceURI","substring","CharInfo","charId","ErrorBoundary","state","errorInfo","console","log","this","setState","children","CharSearchForm","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","onChange","target","value","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.ba30a295.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img src={img} style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit:\r\n        'contain', margin: \"0 auto\"}} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=de18a0a550d2cdd8b954831a7153c0fb\";\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey} `);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey} `);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? (`${char.description.slice(0, 200)}...`) : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description  || \"There is no description\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\"\r\n        }\r\n    }\r\n\r\n    return {clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {   // можно через export default, неважно как\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        // setLoading(true);\r\n        setProcess('loading')\r\n        try { // метод будет только отправлять запрос, но не обрабатывать его через .then .catch, поэтому исп-ем try-catch\r\n            const response = await fetch(url, {method, body,headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            // setLoading(false);\r\n            // setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        // setError(null);   // нужно очистить ошибку, дабы после ее выпадения, мы могли подгружать снова данные, иначе ошибка будет висеть\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request,clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();    // свойство, вместо this.marvelService = new ...\n\n    useEffect(() => {\n        updateChar();\n    },[])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        // setError(false);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        // getAllCharacters()\n        // .then(res => console.log(res))\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n    \n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {/* {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {objectFit : 'cover'};\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {objectFit : 'contain'}\n    }\n\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;  // у нас грузятся новые элементы, если да, тогда компонент, если нет, тогда это первая загрузка и нужен спиннер\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setcharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setChatEnded] = useState(false);\n\n    const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        }, [])\n    \n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);  // если в onRequest передать true, то мы говорим коду, что это первичная зарузка и установим false, если же идет повторная загрузка и initial = false, то состояние меняем на true в setNewItemLoading\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n \n        setcharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setChatEnded(chatEnded => ended)\n        \n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {objectFit : 'cover'};\n\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {objectFit : 'contain'}\n        }   \n\n            return(\n                <CSSTransition  timeout={200} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        key={item.id}\n                        ref={el => itemRefs.current[i] = el}  // в ref может помещаться колбэк ref, к-ый принимает в себя единственным аргументом тот элемент на котором он был вызван, а т.к. здесь идет перебор методом map, li создаются внутри цикла, то можно задать ссылку на элемент el и т.к. itemsRefs.current это массив, то можно исп-ть не push, к-ый может дать ошибку, а элементы по порядку складывать, где el ссылка на dom элемент\n                        tabIndex={0}\n                        onClick = {() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i)\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>           \n        )\n    }\n    \n    // const items = renderItems(charList);\n    \n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    \n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n    }, [process]);\n\n    return(         // в setContent помещаем () => renderItems(charList)), т.к. мы должны передать компонент, а функ-й компонент это функция, к-ая возвращает реакт-элементы и потому мы передает функцию и возвращаем элемент renderItems\n        <div className=\"char__list\"> \n            {elements}  \n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport { Link } from 'react-router-dom';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);      // null = false, !!!dont forget\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService(); \n\n    useEffect(() => {\n        updateChar();\n    },[props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))  // setProcess('confirmed') был в hook.js, но т.к. операции у нас асинхронные, то <View char={char}/> начнет отрисовывать компонент без данных char, поэтому эта строка вручную устанавливает стейт когда нужно\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        // setError(false);\n    }\n\n    // const skeleton = char || loading || error ? null : <Skeleton/>\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {objectFit : \"cover\"};\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {objectFit : 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : \"There is no comics with this character\"}\n                    {\n                        comics.map((item, i) => {\n                            if (i > 9) return;\n                            return(\n                                <li key={i} className=\"char__comics-item\">\n                                    <Link to={`/comics/${item.resourceURI.substring(43)}`}>\n                                    {item.name}\n                                    </Link>\n                                </li>\n                            )\n                        })\n                    }\n                    \n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form onChange={e => !e.target.value ? setChar(null) : null}>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../CharSearcForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] =useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}