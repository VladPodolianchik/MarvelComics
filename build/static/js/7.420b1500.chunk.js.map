{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","language","textObjects","pageCount","price","prices","AppBanner","className","avengers","avengersLogo","setContent","Component","newItemLoading","Spinner","ComicsList","comicsList","setComicsList","setNewItemLoading","setOffset","comicsEnded","setComicsEnded","loading","error","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","item","i","to","renderItems","disabled","onClick","ComicsPage","Helmet","content"],"mappings":"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","file":"static/js/7.420b1500.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img src={img} style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit:\r\n        'contain', margin: \"0 auto\"}} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=de18a0a550d2cdd8b954831a7153c0fb\";\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey} `);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey} `);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? (`${char.description.slice(0, 200)}...`) : \"There is no description for this character\",\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description  || \"There is no description\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\"\r\n        }\r\n    }\r\n\r\n    return {clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {   // можно через export default, неважно как\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        // setLoading(true);\r\n        setProcess('loading')\r\n        try { // метод будет только отправлять запрос, но не обрабатывать его через .then .catch, поэтому исп-ем try-catch\r\n            const response = await fetch(url, {method, body,headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            // setLoading(false);\r\n            // setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        // setError(null);   // нужно очистить ошибку, дабы после ее выпадения, мы могли подгружать снова данные, иначе ошибка будет висеть\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request,clearError, process, setProcess}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;  // у нас грузятся новые элементы, если да, тогда компонент, если нет, тогда это первая загрузка и нужен спиннер\n            break;\n        case 'confirmed':\n            return <Component/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    \n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n    \n    useEffect(() => {\n        onRequest(offset, true);\n        }, [])\n    \n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);  // если в onRequest передать true, то мы говорим коду, что это первичная зарузка и установим false, если же идет повторная загрузка и initial = false, то состояние меняем на true в setNewItemLoading\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n     \n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended)         \n    }\n    \n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (                            // вроде как сервер багует и выдает одинаковые комиксы, поэтому key=номеру по порядку, а не id, т.к. key не должны повторяться\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link> \n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    // const items = renderItems(comicsList);\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)} \n            {/* {errorMessage}\n            {spinner}\n            {items} */}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                    />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}